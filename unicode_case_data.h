#ifndef UNICODE_CASE_DATA_H
#define UNICODE_CASE_DATA_H
#include <stdint.h>
#include <stddef.h>

typedef struct { uint32_t from; uint32_t to; } unicode_case_map_t;

static const unicode_case_map_t unicode_tolower_map[] = {
    {0x0041, 0x0061}, /* A -> a */
    {0x0042, 0x0062}, /* B -> b */
    {0x0043, 0x0063},
    {0x0044, 0x0064},
    {0x0045, 0x0065},
    {0x0046, 0x0066},
    {0x0047, 0x0067},
    {0x0048, 0x0068},
    {0x0049, 0x0069},
    {0x004A, 0x006A},
    {0x004B, 0x006B},
    {0x004C, 0x006C},
    {0x004D, 0x006D},
    {0x004E, 0x006E},
    {0x004F, 0x006F},
    {0x0050, 0x0070},
    {0x0051, 0x0071},
    {0x0052, 0x0072},
    {0x0053, 0x0073},
    {0x0054, 0x0074},
    {0x0055, 0x0075},
    {0x0056, 0x0076},
    {0x0057, 0x0077},
    {0x0058, 0x0078},
    {0x0059, 0x0079},
    {0x005A, 0x007A}  /* Z -> z */
};

static const size_t unicode_tolower_map_len = sizeof(unicode_tolower_map)/sizeof(unicode_tolower_map[0]);

static const unicode_case_map_t unicode_toupper_map[] = {
    {0x0061, 0x0041}, /* a -> A */
    {0x0062, 0x0042},
    {0x0063, 0x0043},
    {0x0064, 0x0044},
    {0x0065, 0x0045},
    {0x0066, 0x0046},
    {0x0067, 0x0047},
    {0x0068, 0x0048},
    {0x0069, 0x0049},
    {0x006A, 0x004A},
    {0x006B, 0x004B},
    {0x006C, 0x004C},
    {0x006D, 0x004D},
    {0x006E, 0x004E},
    {0x006F, 0x004F},
    {0x0070, 0x0050},
    {0x0071, 0x0051},
    {0x0072, 0x0052},
    {0x0073, 0x0053},
    {0x0074, 0x0054},
    {0x0075, 0x0055},
    {0x0076, 0x0056},
    {0x0077, 0x0057},
    {0x0078, 0x0058},
    {0x0079, 0x0059},
    {0x007A, 0x005A}  /* z -> Z */
};

static const size_t unicode_toupper_map_len = sizeof(unicode_toupper_map)/sizeof(unicode_toupper_map[0]);

#endif /* UNICODE_CASE_DATA_H */
